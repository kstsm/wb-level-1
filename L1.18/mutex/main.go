package main

import (
	"fmt"
	"sync"
)

//Реализовать структуру-счётчик, которая будет инкрементироваться в конкурентной среде (т.е. из нескольких горутин).
//По завершению программы структура должна выводить итоговое значение счётчика.
//Подсказка: вам понадобится механизм синхронизации, например, sync.Mutex или sync/Atomic для безопасного инкремента.

// Определяем структуру счетчика
type counter struct {
	mu  sync.Mutex // мьютекс для синхронизации доступа
	val int
}

// Метод для увеличения счетчика на 1
func (c *counter) increment() {
	c.mu.Lock()   // блокируем доступ к счётчику
	c.val++       // увеличиваем значение
	c.mu.Unlock() // разблокируем
}

// Метод для получения значения счетчика
func (c *counter) result() int {
	return c.val
}

func main() {
	// Создаём WaitGroup для синхронизации горутин
	var wg sync.WaitGroup

	// Инициализируем счетчик
	c := counter{}

	// Запускаем 3 горутины
	for i := 0; i < 3; i++ {
		// увеличиваем счётчик ожидания
		wg.Add(1)

		go func() {
			// уменьшаем счетчик по завершении горутины
			defer wg.Done()

			// Каждая горутина увеличивает счетчик 5 раз
			for j := 0; j < 5; j++ {
				c.increment()
			}
		}()
	}

	// Ждём завершения всех горутин
	wg.Wait()

	// Выводим итоговое значение счетчика
	fmt.Println(c.result())
}
