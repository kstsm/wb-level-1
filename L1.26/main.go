package main

import (
	"fmt"
	"strings"
)

//Разработать программу, которая проверяет, что все символы в строке встречаются один раз
//(т.е. строка состоит из уникальных символов). Вывод: true, если все символы уникальны, false,
//если есть повторения. Проверка должна быть регистронезависимой,
//т.е. символы в разных регистрах считать одинаковыми.
//Например: "abcd" -> true, "abCdefAaf" -> false (повторяются a/A), "aabcd" -> false.
//Подумайте, какой структурой данных удобно воспользоваться для проверки условия.

func uniqueSymbol(word string) bool {
	// Создаем мапу для хранения встреченных символов
	// Значение нам не нужно, поэтому используем пустую структуру (экономия памяти)
	// Ключ используем типа rune, чтобы удобно работать с символами после range
	m := make(map[rune]struct{})

	// Переводим слово в нижний регистр, чтобы 'A' и 'a' считались одним символом
	lw := strings.ToLower(word)

	// Проходим по каждому символу строк
	for _, r := range lw {
		// Если такой символ имеется в ключе мапы, то выходим из функции и возвращаем false
		if _, ok := m[r]; ok {
			return false
		}
		// Если такого символа нет, то записываем его в ключ и начинаем проверять следующий символ
		m[r] = struct{}{}
	}

	// Если повтором не найдено, то возвращаем true
	return true
}

func main() {
	fmt.Println(uniqueSymbol("abc"))  // true
	fmt.Println(uniqueSymbol("abcc")) // false
	fmt.Println(uniqueSymbol("abcC")) // false
}
