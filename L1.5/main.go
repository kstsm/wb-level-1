package main

import (
	"context"
	"fmt"
	"math/rand"
	"time"
)

//Разработать программу, которая будет последовательно отправлять значения в канал,
//а с другой стороны канала – читать эти значения. По истечении N секунд программа должна завершаться.
//Подсказка: используйте time.After или таймер для ограничения времени работы.

func main() {
	// Создаем канал для передачи чисел
	ch := make(chan int)

	// Задаем длительность работы программы (секунды)
	timer := 5

	// Создаем контекст с таймаутом
	ctx, cancel := context.WithTimeout(context.Background(), time.Second*time.Duration(timer))
	// Отмена контекста при завершении main
	defer cancel()

	// Создаем горутину для отправки данных в канал
	go func() {
		// Закрываем канал после завершения горутины
		defer close(ch)
		// Создаем бесконечный цикл для отправки данных в канал
		for {
			// Селект проверяет таймаут и отправку данных
			select {
			// Если таймаут истек
			case <-ctx.Done():
				// Сообщаем о завершении
				fmt.Println("Таймер истек")
				// Завершаем горутину
				return
				// Отправляем случайное число в канал
			case ch <- rand.Intn(100):
			}
		}
	}()

	// Читаем данные из канала до его закрытия
	for result := range ch {
		// Выводим число
		fmt.Println(result)
	}
}
