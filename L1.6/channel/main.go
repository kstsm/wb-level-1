package main

import (
	"fmt"
	"time"
)

//Остановка горутины через канал уведомления

func worker(stop chan struct{}) {
	// Бесконечный цикл, в котором горутина выполняет работу и проверяет сигнал остановки
	for {
		select {
		// Проверка канала на сигнал завершения
		case <-stop:
			// Сообщение о завершении
			fmt.Println("Горутина закрывается")
			// Завершаем работу горутины
			return
			// Если сигнала нет, выполняем работу
		default:
			// Сообщение о работе горутины
			fmt.Println("Горутина работает")
			// Пауза между итерациями
			time.Sleep(time.Second)
		}
	}
}

func main() {
	// Канал для сигнала остановки
	stop := make(chan struct{})

	// Запускаем горутину
	go worker(stop)

	// Ждем 3 секунды, чтобы горутина успел поработать
	time.Sleep(time.Second * 3)

	// Отправляем сигнал в горутину для завершения работы
	stop <- struct{}{}

	// Закрываем канал
	close(stop)

	// Ждем, чтобы горутина успел вывести сообщение перед завершением main
	time.Sleep(time.Second)
}
