package main

import (
	"context"
	"fmt"
	"os"
	"os/signal"
	"sync"
	"syscall"
	"time"
)

//Программа должна корректно завершаться по нажатию Ctrl+C (SIGINT).
//Выберите и обоснуйте способ завершения работы всех горутин-воркеров при получении сигнала прерывания.
//Подсказка: можно использовать контекст (context.Context) или канал для оповещения о завершении.

//Почему стоит выбрать способ через контекст?
// Один контекст может остановить много горутин сразу, без кучи отдельных каналов
// Есть несколько видов контекстов, с помощью которых можно добиться разных результатов (WithCancel, WithTimeout, WithDeadline)
// Много различных библиотек, которые работают с контекстом напрямую (sql,pgx, http, kafka, gRPC)
// Контекст можно передавать глубоко по стеку вызовов (в сервисы, в воркеры, в обработчики)
// context.Context — стандартный способ управлять жизненным циклом горутин в Go
// Его легко отменить по сигналу (signal.NotifyContext).

// Worker, который выполняет периодическую работу
// и корректно завершает работу при отмене контекста
func worker(ctx context.Context, i int, wg *sync.WaitGroup) {
	// сообщаем WaitGroup о завершении горутины
	defer wg.Done()

	for {
		select {
		// Каждую секунду выполняем работу воркера
		case <-time.After(time.Second):
			fmt.Printf("Воркер %d работает\n", i)

		// Слушаем сигнал завершения через контекст
		case <-ctx.Done():
			fmt.Printf("Воркер %d остановлен\n", i)
			// корректно выходим из горутины
			return
		}
	}
}

func main() {
	// Создаем WaitGroup для ожидания завершения всех воркеров
	var wg sync.WaitGroup
	// Выбираем количество воркеров
	wrk := 3

	// Создаём контекст, который автоматически отменяется при получении
	// сигнала прерывания Ctrl+C SIGINT
	// Контекст используется для уведомления всех воркеров о необходимости завершения
	ctx, stop := signal.NotifyContext(context.Background(), os.Interrupt, syscall.SIGINT)
	// освобождаем ресурсы
	defer stop()

	// Запускаем воркеры
	wg.Add(wrk)
	for i := 0; i < wrk; i++ {
		go worker(ctx, i, &wg)
	}

	// Ждём завершения всех воркеров
	wg.Wait()
}
